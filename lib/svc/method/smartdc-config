#!/bin/bash
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#
# Copyright 2019 Joyent, Inc.
# Copyright 2019 Erigones, s. r. o.
#

#
# Despite its "smartdc/config" name, this service is used both for SmartOS and
# Triton. It has two jobs:
#
# During an initial setup, this runs through the initial (possibly interactive)
# configuration.
#
# During normal operation, it does some miscellaneous configuration based on
# /usbkey/config (which, under Triton, will have already been updated from the
# USB key by svc:/system/filesystem/smartdc:default).
#

set -o errexit
set -o xtrace

. /lib/svc/share/smf_include.sh
. /lib/sdc/config.sh

export PATH="/usr/sbin:/sbin:/usr/bin"

set_root_password() {
    enc_password=$1

    sed -e "s|^root:[^\:]*:|root:${enc_password}:|" /etc/shadow > /etc/shadow.new \
      && chmod 400 /etc/shadow.new \
      && mv /etc/shadow.new /etc/shadow
}

# Gets the link state for the given interface
get_link_state() {
    set -o xtrace
    link_state=$(/usr/sbin/dladm show-phys -po state "${1}" 2>/dev/null)
}

# Waits for up to 10 seconds for the link state to change to the given value
wait_for_nic_state() {
    local nic="$1"
    local state="$2"
    local i=0

    set -o xtrace
    echo "wait_for_nic_state: nic ${nic} waiting for state '${state}'"

    while [[ ${i} -ne 10 ]]; do
        get_link_state "${nic}"
        echo "  ${i}: nic=${nic} link_state=${link_state}"

        if [[ "${link_state}" == "${state}" ]]; then
            return 0
        fi

        sleep 1
        ((i++))
    done

    echo "wait_for_nic_state: nic {$nic} finished in state '${link_state}'"
    return 1
}

# Plumbs the interface, and attempts to work around poorly-behaved
# drivers that can't handle plumb commands too quickly after one another
plumb_nic() {
    local nic="$1"

    set -o xtrace
    driver="${nic%%[0-9]*}"
    get_link_state "${nic}"

    if [[ "$link_state" == "down" ]]; then
        echo "NIC '${nic}' is down: unplumbing"
        /sbin/ifconfig "${nic}" down unplumb
        wait_for_nic_state "${nic}" "unknown"
    fi

    # There's some sort of race condition in the bnx driver: if the plumb
    # command comes too soon after the unplumb, the interface can come up
    # in a state where it never fires interrupts for link state changes.
    if [[ "$driver" == "bnx" ]]; then
        sleep 5
    fi

    /sbin/ifconfig "${nic}" plumb
    wait_for_nic_state "${nic}" "up"

    return $?
}

get_nic_ip() {
    local nic="$1"
    local timeout=30
    local nic_ip=""

    while [[ ${timeout} -gt 0 ]]; do
        nic_ip=$(/sbin/ifconfig "${nic}" 2> /dev/null| grep inet | awk '{ print $2 }')

        if [[ -n "${nic_ip}" && "${nic_ip}" != "0.0.0.0" ]]; then
            break  # we have a nic_ip
        fi

        nic_ip=""
        timeout=$((${timeout} - 1))
        sleep 1
    done

    echo "${nic_ip}"
}

# Temporary activates DHCP on any NIC and downloads a netboot_install_script
# After the script finishes the network is shut down.
netboot_config() {
    local install_script="/var/tmp/netboot_install_script"

    if [[ -n "${SYSINFO_NIC_admin}" ]]; then
        admin_nics="${SYSINFO_NIC_admin}"
    else
        admin_nics="$(/usr/sbin/dladm show-phys -p -o link)"
    fi

    NIC_UP=""

    for nic in ${admin_nics}; do
        nic=$(echo "${nic}" | tr -d '[:space:]')

        [[ -z "${nic}" ]] && continue

        echo "Activating NIC ${nic}"

        if plumb_nic "${nic}"; then
            echo "Running DHCP on NIC ${nic}"
            /sbin/ifconfig "${nic}" dhcp wait 10 || /bin/true
            nic_dhcp_ip=$(get_nic_ip "${nic}")

            if [[ -n "${nic_dhcp_ip}" ]]; then
                echo "Got NIC ${nic} IP address: ${nic_dhcp_ip}"
                NIC_UP="${nic}"
                break
            else
                /sbin/ifconfig "${nic}" unplumb 2> /dev/null || /bin/true
                continue
            fi
        fi
    done

    if [[ -n "${NIC_UP}" ]]; then
        install_script_url="$(/bin/bootparams | grep "^netboot_install_script=" | cut -d'=' -f2-)"
        if curl -m 30 -f -s -k -L -o "${install_script}" "${install_script_url}"; then
            echo "Running netboot_install_script from ${install_script_url}"
            chmod +x "${install_script}"
            "${install_script}" "${NIC_UP}" >/dev/console 2>&1
            /sbin/ifconfig "${NIC_UP}" unplumb 2> /dev/null
            return 0
        else
            /sbin/ifconfig "${NIC_UP}" unplumb 2> /dev/null
            echo "FATAL: Failed to download netboot_install_script from ${install_script_url}" >&2
        fi
    else
        echo "FATAL: Could not configure DHCP for netboot_install_script" >&2
    fi

    return 1
}


case "$1" in
'start')

    # If we're a headnode, see if we have to do interactive configuration.
    if /bin/bootparams | grep "^headnode=true" > /dev/null 2>&1; then
        USB_PATH=/mnt/`svcprop -p "joyentfs/usb_mountpoint" svc:/system/filesystem/smartdc:default`

        # Check for config and run interactive if it doesn't exist.
        if [[ ! -f ${USB_PATH}/config ]]; then
            if /bin/bootparams | grep "^noimport=true" >/dev/null 2>&1; then
                # Skipping interactive config, bypass rest of script.
                exit $SMF_EXIT_OK
            fi

            /smartdc/lib/sdc-on-tty -d /dev/console \
                ${USB_PATH}/scripts/prompt-config.sh "${USB_PATH}"

            # If user quit from interactive configuration then we're done.
            [[ ! -f ${USB_PATH}/config ]] && exit $SMF_EXIT_OK
        fi
    elif /bin/bootparams | grep "^smartos=true" > /dev/null 2>&1; then
        USB_PATH=/`svcprop -p "joyentfs/usb_copy_path" svc:/system/filesystem/smartdc:default`
        USBMOUNT=/mnt/`svcprop -p "joyentfs/usb_mountpoint" svc:/system/filesystem/smartdc:default`

        # Check for config and run interactive if it doesn't exist.
        if [[ ! -f ${USB_PATH}/config ]]; then
            if /bin/bootparams | grep "^noimport=true" >/dev/null 2>&1; then
                if /bin/bootparams | grep "^root_shadow=" >/dev/null 2>&1; then
                    set_root_password "$(/bin/bootparams | grep "^root_shadow=" | cut -d'=' -f2-)"
                    echo "Set root password from boot parameters."
                fi
                # Skipping interactive config, bypass rest of script.
                exit $SMF_EXIT_OK
            fi

            if /bin/bootparams | grep "^netboot_install_script=" > /dev/null 2>&1; then
                if ! netboot_config; then
                    exit ${SMF_EXIT_ERR_CONFIG}
                fi
            else
                if [[ -f "${USBMOUNT}/scripts/prompt-config.sh" ]]; then
                    USB_PATH="${USBMOUNT}"
                    prompt_config="${USBMOUNT}/scripts/prompt-config.sh"
                elif [[ -f "${USB_PATH}/scripts/prompt-config.sh" ]]; then
                    prompt_config="${USB_PATH}/scripts/prompt-config.sh"
                else
                    prompt_config="/smartdc/lib/smartos_prompt_config.sh"
                fi

                /smartdc/lib/sdc-on-tty -d /dev/console \
                    "${prompt_config}" "${USB_PATH}"
            fi

            # If user quit from interactive configuration then we're done.
            [[ ! -f ${USB_PATH}/config ]] && exit $SMF_EXIT_OK
        fi
    fi

    # This puts config vars in CONFIG_
    load_sdc_config
    load_sdc_sysinfo

    # Write the info about this datacenter to /.dcinfo so we can use in the GZ
    echo "SDC_DATACENTER_NAME='${CONFIG_datacenter_name}'" > /.dcinfo

    if [[ -n "${SYSINFO_Bootparam_smartos}" && -f /usbkey/shadow ]]; then
        echo "setting root password from /usbkey/shadow"
    # Boot parameter takes precidence over config
    elif [[ -n "${SYSINFO_Bootparam_root_shadow}" ]]; then
        set_root_password "${SYSINFO_Bootparam_root_shadow}"
        echo "Set root password boot parameters."
    elif [[ -n "${CONFIG_root_shadow}" ]]; then
        set_root_password "${CONFIG_root_shadow}"
        echo "Set root password from config."
    else
        echo "No root shadow entry in the config, cannot set."
    fi

    # Set authorized_keys for root
    if [[ -n "${CONFIG_root_authorized_keys_file}" ]] \
        && [[ -n "${CONFIG_config_inc_dir}" ]] \
        && [[ -d "${CONFIG_config_inc_dir}" ]] \
        && [[ -f "${CONFIG_config_inc_dir}/${CONFIG_root_authorized_keys_file}" ]]; then

        mkdir -p /root/.ssh
        cp "${CONFIG_config_inc_dir}/${CONFIG_root_authorized_keys_file}" /root/.ssh/authorized_keys
        chmod 0600 /root/.ssh/authorized_keys
        chmod 0700 /root/.ssh
    fi

    # Copy private part of root's SSH key
    if [[ -n "${CONFIG_ssh_private_key_file}" ]] \
        && [[ -n "${CONFIG_config_inc_dir}" ]] \
        && [[ -d "${CONFIG_config_inc_dir}" ]] \
        && [[ -f "${CONFIG_config_inc_dir}/${CONFIG_ssh_private_key_file}" ]]; then

        mkdir -p /root/.ssh
        cp "${CONFIG_config_inc_dir}/${CONFIG_ssh_private_key_file}" /root/.ssh/id_rsa
        chmod 0600 /root/.ssh/id_rsa
        chmod 0700 /root/.ssh
    fi

    # Copy public part of root's SSH key
    if [[ -n "${CONFIG_ssh_public_key_file}" ]] \
        && [[ -n "${CONFIG_config_inc_dir}" ]] \
        && [[ -d "${CONFIG_config_inc_dir}" ]] \
        && [[ -f "${CONFIG_config_inc_dir}/${CONFIG_ssh_public_key_file}" ]]; then

        mkdir -p /root/.ssh
        cp "${CONFIG_config_inc_dir}/${CONFIG_ssh_public_key_file}" /root/.ssh/id_rsa.pub
        chmod 0644 /root/.ssh/id_rsa.pub
        chmod 0700 /root/.ssh
    fi

    if [[ -n "${CONFIG_ntp_conf_file}" ]] \
        && [[ -n "${CONFIG_config_inc_dir}" ]] \
        && [[ -d "${CONFIG_config_inc_dir}" ]] \
        && [[ -f "${CONFIG_config_inc_dir}/${CONFIG_ntp_conf_file}" ]]; then
        #
        # We were given a valid NTP configuration file, so use it without
        # modification:
        #
        cp "${CONFIG_config_inc_dir}/${CONFIG_ntp_conf_file}" \
          /etc/inet/ntp.conf
        echo "Copied NTP configuration."
    else
        #
        # If we have an admin network defined, allow time service from this
        # network:
        #
        ntp_aflag=
        if [[ -n ${CONFIG_admin_network} && -n ${CONFIG_admin_netmask} ]]; then
            if [[ "${CONFIG_admin_network}" != "..." ]]; then
                ntp_aflag="-a ${CONFIG_admin_network}/${CONFIG_admin_netmask}"
            fi
        fi

        #
        # If we were given a list of servers, use it:
        #
        ntp_hosts="${CONFIG_ntp_hosts}"
        if [[ -z "${ntp_hosts}" ]]; then
            #
            # Otherwise, use the default SmartOS vendor pool from the NTP
            # Pool Project:
            #
            ntp_hosts='0.smartos.pool.ntp.org'
        fi

        #
        # Generate NTP configuration:
        #
        if ! /smartdc/lib/ntp_config -f /etc/inet/ntp.conf \
          -s "${ntp_hosts}" ${ntp_aflag}; then
            echo "FATAL: could not configure NTP" >&2
            exit ${SMF_EXIT_ERR_CONFIG}
        fi
        echo "Generated NTP configuration."
    fi

    # set the keymap. For dvorak for instance
    if [[ -n ${CONFIG_default_keymap} ]]; then
        /usr/bin/loadkeys ${CONFIG_default_keymap}
    fi

    #
    # In SmartOS, disabling SMT via the boot option is a pain, so we support a
    # config option in /usbkey/config, the official mechanism for permanent
    # configuration.  We'd like to do this earlier but we have to wait for
    # /usbkey to be mounted first. This does imply we've potentially handed out
    # "too many" interrupts for the set of CPUs remaining online.
    #
    if [[ -n $(/bin/bootparams | grep '^smartos=true') ]]; then
        if [[ "$CONFIG_smt_enabled" = "false" ]]; then
            psradm -aS || exit $SMF_EXIT_ERR_FATAL
        fi
    fi

    # Enable virtual terminals to support interactive installation
    vtdaemon="svc:/system/vtdaemon"
    svccfg -s ${vtdaemon} setprop options/hotkeys=true
    svcadm refresh ${vtdaemon}
    svcadm enable ${vtdaemon}
    svcadm enable svc:/system/console-login:vt2
    svcadm enable svc:/system/console-login:vt3
    svcadm enable svc:/system/console-login:vt4
    svcadm enable svc:/system/console-login:vt5
    svcadm enable svc:/system/console-login:vt6

    # force update of sysinfo (and dump to stdout so we have in the log)
    sysinfo -f

    ;;

'stop')
    ;;

*)
    echo "Usage: $0 { start | stop }"
    exit $SMF_EXIT_ERR_FATAL
    ;;
esac
exit $SMF_EXIT_OK
